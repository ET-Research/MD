
replicaBarrier

set nr [numReplicas]
if { $num_replicas != $nr } {
    error "restart with wrong number of replicas"
}
set r [myReplica]
set replica_id $r

proc link_file {file_new file_target} {
  if {![file exists $file_new]} {
    file link -hard  $file_new $file_target
  }
}


# restart
if {$stage > 1} { 
  set pre [expr $stage - 1]
  source "$dir_root_output/$replica_id/md${pre}/md${pre}.remdff_restart.tcl"
  source ${restart_prefix}.tcl
} else {
  set stage 1 
  set i_run 0
  set i_step 0
  if {[info exists first_timestep]} {
    set i_step $first_timestep
  }

  set replica(index) $r
  set replica(loc.a) $r
  set replica(index.a) $r
  set replica(loc.b) $r
  set replica(index.b) $r
  set replica(exchanges_attempted) 0
  set replica(exchanges_accepted) 0

  if { $r % 2 == 0 && $r+1 < $nr } {
    set replica(loc.a) [expr $r+1]
    set replica(index.a) [expr $r+1]
  }
  if { $r % 2 == 1 && $r > 0 } {
    set replica(loc.a) [expr $r-1]
    set replica(index.a) [expr $r-1]
  }

  if { $r % 2 == 1 && $r+1 < $nr } {
    set replica(loc.b) [expr $r+1]
    set replica(index.b) [expr $r+1]
  }
  if { $r % 2 == 0 && $r > 0 } {
    set replica(loc.b) [expr $r-1]
    set replica(index.b) [expr $r-1]
  }

}

set dir_output "$dir_root_output/$replica_id/md${stage}"
file mkdir $dir_output

set job_output_root "$dir_output/${prefix_output}${stage}"
firsttimestep $i_step

set replica(griddx)   "$replica(index).dx"
set replica(griddx.a) "$replica(index.a).dx"
set replica(griddx.b) "$replica(index.b).dx"

if {! [info exists restart_root]} { 
    link_file ${dir_output}/$replica(griddx)   ${dir_map}/$replica(index).dx
    link_file ${dir_output}/$replica(griddx.a) ${dir_map}/$replica(index.a).dx
    link_file ${dir_output}/$replica(griddx.b) ${dir_map}/$replica(index.b).dx
}

proc save_callback {labels values} {
  global saved_labels saved_values
  set saved_labels $labels
  set saved_values $values
}
callback save_callback

proc save_array {} {
  global saved_labels saved_values saved_array
  foreach label $saved_labels value $saved_values {
    set saved_array($label) $value
  }
}
set TEMP $T
set replica(temperature) $TEMP
set GRIDFILE ${dir_output}/$replica(griddx)
seed [expr int(0*srand(int(100000*rand()) + 100*$replica_id) + 100000*rand() + 1)]

langevin on
langevinTemp $TEMP
outputname [format "${job_output_root}_replica%d" $replica_id]

#=================================================
# Restart
#=================================================
if {$i_run} {
  bincoordinates ${restart_prefix}.coor
  binvelocities  ${restart_prefix}.vel
  extendedSystem ${restart_prefix}.xsc
} else {
  temperature $TEMP
}

outputEnergies [expr $steps_per_run / 10]
dcdFreq [expr $steps_per_run * $runs_per_frame]

source $namd_config_file


set history_file [open [format "${job_output_root}_replica%d.history" $replica_id] "w"]
fconfigure $history_file -buffering line

while {$i_run < $num_runs} {

  run $steps_per_run
  save_array
  incr i_step $steps_per_run
  set POTENTIAL [expr $saved_array(TOTAL) - $saved_array(KINETIC)]
  puts $history_file "$i_step $replica(index) $replica(griddx) $GRIDFILE $POTENTIAL"

  if { $i_run % 2 == 0 } {
    set swap a; set other b
  } else {
    set swap b; set other a
  }

  set doswap 0
  if { $replica(index) < $replica(index.$swap) } {
    set grid $replica(griddx)
    set grid2 $replica(griddx.$swap)
    set BOLTZMAN 0.001987191
    set pot $POTENTIAL
    set pot2 [replicaRecv $replica(loc.$swap)]
    set delta [expr ($pot2 - $pot)]
    set doswap [expr $delta < 0. || exp(-1. * $delta) > rand()]
    replicaSend $doswap $replica(loc.$swap)
    if { $doswap } {
      set rid $replica(index)
      set rid2 $replica(index.$swap)
      puts stderr "EXCHANGE_ACCEPT $rid ($grid) $rid2 ($grid2) RUN $i_run"
      incr replica(exchanges_accepted)
    }
    incr replica(exchanges_attempted)
  }
  if { $replica(index) > $replica(index.$swap) } {
    replicaSend $POTENTIAL $replica(loc.$swap)
    set doswap [replicaRecv $replica(loc.$swap)]
  }

  set newloc $r
  if { $doswap } {
    set newloc $replica(loc.$swap)
    set replica(loc.$swap) $r
  }
  set replica(loc.$other) [replicaSendrecv $newloc $replica(loc.$other) $replica(loc.$other)]
  set oldidx $replica(index)
  if { $doswap } {
    array set replica [replicaSendrecv [array get replica] $newloc $newloc]
    set NEWGRID ${dir_map}/$replica(griddx)
    puts stderr "Copying $NEWGRID over $GRIDFILE"
    file delete "$GRIDFILE"
    link_file "$GRIDFILE" "$NEWGRID"

    
    while { ![file exists "$GRIDFILE"] } {}
    reloadGridforceGrid 0
  }

  incr i_run

  if { $i_run % ($runs_per_frame * $frames_per_restart) == 0 ||
        $i_run == $num_runs } {
    set restart_root [format "${job_output_root}_replica%d" $replica_id]
    set restart_prefix "${restart_root}_x${i_run}"
    output           $restart_prefix
    set rfile        [open "${restart_prefix}.tcl" "w"]
    puts $rfile [list array set replica [array get replica]]
    close $rfile
    replicaBarrier

    set rfile [open "${restart_root}.tcl" "w"]
    puts $rfile [list set stage [expr $stage + 1]]
    puts $rfile [list set i_run $i_run]
    puts $rfile [list set i_step $i_step]
    puts $rfile [list set restart_prefix $restart_prefix]
    close $rfile

    replicaBarrier

    if {[info exists old_restart_root]} {
      file delete ${old_restart_root}.tcl
      file delete ${old_restart_root}.coor
      file delete ${old_restart_root}.vel
      file delete ${old_restart_root}.xsc
    }

    # update
    set old_restart_root $restart_root
  }
}

set attempts $replica(exchanges_attempted)
if $attempts {
  set i $replica(index)
  set accepts $replica(exchanges_accepted)
  set ratio [expr 1.0*$accepts/$attempts]
  puts stderr "EXCHANGE_RATIO $accepts $attempts $ratio"
}

replicaBarrier

